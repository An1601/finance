import {
  formItem,
  loanFormType,
  validateOptType,
} from "@container/bank/record/create-loan-list";
import { PayloadAction, createSlice } from "@reduxjs/toolkit";
import { LoanSubmit } from "@type/enum";
import { getAllForm, getAutoGeneratedID } from "./userThunks";

interface createLoanType {
  loanForm: loanFormType[];
  autoID: number | undefined;
  validateOpt: validateOptType | undefined;
  selectedForm: number | undefined;
  formList: Array<formItem>;
}

export const initSection = (sectionId: number) => ({
  id: sectionId,
  sectionName: "",
  fields: [
    {
      id: 0,
      fieldName: "",
      fieldType: LoanSubmit.TEXT,
      options: [],
    },
  ],
});
export const initialForm: createLoanType = {
  loanForm: [initSection(0)],
  autoID: undefined,
  validateOpt: { fieldId: -1, sectionId: -1 },
  selectedForm: undefined,
  formList: [],
};

const createLoanReducer = createSlice({
  name: "createLoan",
  initialState: initialForm,
  reducers: {
    hanldeAddSection: (state) => {
      return {
        ...state,
        loanForm: [
          ...state.loanForm,
          initSection(
            state.loanForm.length > 0
              ? state.loanForm[state.loanForm.length - 1].id + 1
              : 0,
          ),
        ],
      };
    },
    handleOnChangeSectionName: (
      state,
      action: PayloadAction<{ value: string; sectionId: number }>,
    ) => {
      return {
        ...state,
        loanForm: state.loanForm.map((section) =>
          section.id === action.payload.sectionId
            ? {
                ...section,
                sectionName: action.payload.value,
              }
            : section,
        ),
      };
    },
    handleDeleteSection: (state, action: PayloadAction<number>) => {
      return {
        ...state,
        loanForm: state.loanForm.filter(
          (section) => section.id !== action.payload,
        ),
      };
    },
    hanldeAddField: (state, action: PayloadAction<number>) => {
      return {
        ...state,
        loanForm: state.loanForm.map((section) =>
          section.id === action.payload
            ? {
                ...section,
                fields: [
                  ...section.fields,
                  {
                    id:
                      section.fields.length > 0
                        ? section.fields[section.fields.length - 1].id + 1
                        : 0,
                    fieldName: "",
                    fieldType: LoanSubmit.TEXT,
                    options: [],
                  },
                ],
              }
            : section,
        ),
      };
    },
    handleDeleteField: (
      state,
      action: PayloadAction<{ sectionId: number; fieldId: number }>,
    ) => {
      return {
        ...state,
        loanForm: state.loanForm.map((section) =>
          section.id === action.payload.sectionId
            ? {
                ...section,
                fields: section.fields.filter((field) => {
                  return field.id !== action.payload.fieldId;
                }),
              }
            : section,
        ),
      };
    },
    hanldeOnChangeField: (
      state,
      action: PayloadAction<{
        fieldId: number;
        sectionId: number;
        name?: string;
        type?: number;
      }>,
    ) => {
      return {
        ...state,
        loanForm: state.loanForm.map((section) =>
          section.id === action.payload.sectionId
            ? {
                ...section,
                fields: section.fields.map((field) =>
                  field.id === action.payload.fieldId
                    ? {
                        ...field,
                        fieldType: action.payload.type ?? field.fieldType,
                        fieldName: action.payload.name ?? field.fieldName,
                      }
                    : field,
                ),
              }
            : section,
        ),
      };
    },
    handleAddOption: (
      state,
      action: PayloadAction<{
        fieldId: number;
        sectionId: number;
        value: string;
      }>,
    ) => {
      return {
        ...state,
        loanForm: state.loanForm.map((section) =>
          section.id === action.payload.sectionId
            ? {
                ...section,
                fields: section.fields.map((field) =>
                  field.id === action.payload.fieldId
                    ? {
                        ...field,
                        options: (field.options ?? []).concat(
                          action.payload.value,
                        ),
                      }
                    : field,
                ),
              }
            : section,
        ),
      };
    },
    handleDeleteOption: (
      state,
      action: PayloadAction<{
        fieldId: number;
        sectionId: number;
        opTionIndex: number;
      }>,
    ) => {
      return {
        ...state,
        loanForm: state.loanForm.map((section) =>
          section.id === action.payload.sectionId
            ? {
                ...section,
                fields: section.fields.map((field) =>
                  field.id === action.payload.fieldId
                    ? {
                        ...field,
                        options: field.options.filter(
                          (_, index) => index !== action.payload.opTionIndex,
                        ),
                      }
                    : field,
                ),
              }
            : section,
        ),
      };
    },
    handleSetValidateOpt: (
      state,
      action: PayloadAction<{
        fieldId: number;
        sectionId: number;
      }>,
    ) => {
      return {
        ...state,
        validateOpt: {
          fieldId: action.payload.fieldId,
          sectionId: action.payload.sectionId,
        },
      };
    },
    handleSelectForm: (state, action: PayloadAction<number | undefined>) => {
      return {
        ...state,
        selectedForm: action.payload,
      };
    },
  },
  extraReducers: (builder) => {
    builder.addCase(
      getAllForm.fulfilled,
      (state, action: PayloadAction<formItem[]>) => ({
        ...state,
        formList: action.payload,
      }),
    );
    builder.addCase(
      getAutoGeneratedID.fulfilled,
      (state, action: PayloadAction<number>) => ({
        ...state,
        autoID: action.payload,
      }),
    );
  },
});
export const {
  handleAddOption,
  handleDeleteField,
  handleDeleteOption,
  handleDeleteSection,
  handleOnChangeSectionName,
  hanldeAddField,
  hanldeAddSection,
  hanldeOnChangeField,
  handleSelectForm,
  handleSetValidateOpt,
} = createLoanReducer.actions;
export default createLoanReducer.reducer;
